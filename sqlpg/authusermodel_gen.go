// Code generated by goctl. DO NOT EDIT.

package sqlpg

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authUserFieldNames          = builder.RawFieldNames(&AuthUser{}, true)
	authUserRows                = strings.Join(authUserFieldNames, ",")
	authUserRowsExpectAutoSet   = strings.Join(stringx.Remove(authUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	authUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(authUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicAuthUserIdPrefix       = "cache:public:authUser:id:"
	cachePublicAuthUserUsernamePrefix = "cache:public:authUser:username:"
)

type (
	authUserModel interface {
		Insert(ctx context.Context, data *AuthUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AuthUser, error)
		FindOneByUsername(ctx context.Context, username string) (*AuthUser, error)
		Update(ctx context.Context, data *AuthUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthUserModel struct {
		sqlc.CachedConn
		table string
	}

	AuthUser struct {
		Id          int64        `db:"id"`
		Password    string       `db:"password"`
		LastLogin   sql.NullTime `db:"last_login"`
		IsSuperuser bool         `db:"is_superuser"`
		Username    string       `db:"username"`
		FirstName   string       `db:"first_name"`
		LastName    string       `db:"last_name"`
		Email       string       `db:"email"`
		IsStaff     bool         `db:"is_staff"`
		IsActive    bool         `db:"is_active"`
		DateJoined  time.Time    `db:"date_joined"`
	}
)

func newAuthUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthUserModel {
	return &defaultAuthUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."auth_user"`,
	}
}

func (m *defaultAuthUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicAuthUserIdKey := fmt.Sprintf("%s%v", cachePublicAuthUserIdPrefix, id)
	publicAuthUserUsernameKey := fmt.Sprintf("%s%v", cachePublicAuthUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicAuthUserIdKey, publicAuthUserUsernameKey)
	return err
}

func (m *defaultAuthUserModel) FindOne(ctx context.Context, id int64) (*AuthUser, error) {
	publicAuthUserIdKey := fmt.Sprintf("%s%v", cachePublicAuthUserIdPrefix, id)
	var resp AuthUser
	err := m.QueryRowCtx(ctx, &resp, publicAuthUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", authUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthUserModel) FindOneByUsername(ctx context.Context, username string) (*AuthUser, error) {
	publicAuthUserUsernameKey := fmt.Sprintf("%s%v", cachePublicAuthUserUsernamePrefix, username)
	var resp AuthUser
	err := m.QueryRowIndexCtx(ctx, &resp, publicAuthUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where username = $1 limit 1", authUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthUserModel) Insert(ctx context.Context, data *AuthUser) (sql.Result, error) {
	publicAuthUserIdKey := fmt.Sprintf("%s%v", cachePublicAuthUserIdPrefix, data.Id)
	publicAuthUserUsernameKey := fmt.Sprintf("%s%v", cachePublicAuthUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, authUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Password, data.LastLogin, data.IsSuperuser, data.Username, data.FirstName, data.LastName, data.Email, data.IsStaff, data.IsActive, data.DateJoined)
	}, publicAuthUserIdKey, publicAuthUserUsernameKey)
	return ret, err
}

func (m *defaultAuthUserModel) Update(ctx context.Context, newData *AuthUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicAuthUserIdKey := fmt.Sprintf("%s%v", cachePublicAuthUserIdPrefix, data.Id)
	publicAuthUserUsernameKey := fmt.Sprintf("%s%v", cachePublicAuthUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, authUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Password, newData.LastLogin, newData.IsSuperuser, newData.Username, newData.FirstName, newData.LastName, newData.Email, newData.IsStaff, newData.IsActive, newData.DateJoined)
	}, publicAuthUserIdKey, publicAuthUserUsernameKey)
	return err
}

func (m *defaultAuthUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicAuthUserIdPrefix, primary)
}

func (m *defaultAuthUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", authUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthUserModel) tableName() string {
	return m.table
}
